name: Build and Deploy CUDA ML Library

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  PACKAGE_NAME: cuda-ml-library

jobs:
  # Test build on different Python versions
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy scikit-learn pytest wheel setuptools build
    
    - name: Create __init__.py files
      run: |
        touch __init__.py
        touch SVM/__init__.py
        touch HBM_SVM/__init__.py
    
    - name: Test package structure
      run: |
        python setup.py check
        python -c "import os; print('âœ“ Package structure OK')"

  # Build source distribution
  build-sdist:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Create __init__.py files
      run: |
        touch __init__.py
        touch SVM/__init__.py
        touch HBM_SVM/__init__.py
    
    - name: Build source distribution
      run: |
        python -m build --sdist
    
    - name: Check distribution
      run: |
        twine check dist/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: source-dist
        path: dist/*.tar.gz

  # Build wheels for different platforms  
  build-wheels:
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools numpy scikit-learn build
    
    - name: Create __init__.py files
      run: |
        touch __init__.py
        touch SVM/__init__.py  
        touch HBM_SVM/__init__.py
    
    - name: Build wheel
      run: |
        python -m build --wheel
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/*.whl

  # Deploy to TestPyPI on main branch
  deploy-test:
    runs-on: ubuntu-latest
    needs: [build-sdist, build-wheels]
    if: github.ref == 'refs/heads/main' && github.repository == 'dino65-dev/Cuda-ML-Library'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist-artifacts/
    
    - name: Prepare distribution files
      run: |
        mkdir -p dist/
        find dist-artifacts/ -name "*.whl" -exec cp {} dist/ \;
        find dist-artifacts/ -name "*.tar.gz" -exec cp {} dist/ \;
        ls -la dist/
    
    - name: Publish to TestPyPI
      if: ${{ secrets.TEST_PYPI_API_TOKEN != '' }}
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true

  # Deploy to PyPI on release
  deploy-pypi:
    runs-on: ubuntu-latest
    needs: [build-sdist, build-wheels]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist-artifacts/
    
    - name: Prepare distribution files
      run: |
        mkdir -p dist/
        find dist-artifacts/ -name "*.whl" -exec cp {} dist/ \;
        find dist-artifacts/ -name "*.tar.gz" -exec cp {} dist/ \;
        ls -la dist/
    
    - name: Publish to PyPI
      if: ${{ secrets.PYPI_API_TOKEN != '' }}
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}